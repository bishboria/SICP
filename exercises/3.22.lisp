(define (make-queue)
  (define queue (cons '() '()))
  (let ((front-ptr car)
	(rear-ptr cdr))
    (define (set-front-ptr! item) (set-car! queue item))
    (define (set-rear-ptr! item) (set-cdr! queue item))
    (define (empty-queue?) (null? (front-ptr queue)))
    (define (front)
      (if (empty-queue?)
	(error "FRONT called with an empty queue" queue)
	(car (front-ptr queue))))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
	(cond ((empty-queue?)
	       (set-front-ptr! new-pair)
	       (set-rear-ptr! new-pair)
	       dispatch)
	      (else
		(set-cdr! (rear-ptr queue) new-pair)
		(set-rear-ptr! new-pair)
		dispatch))))
    (define (delete-queue!)
      (cond ((empty-queue?)
	     (error "DELETE! called with an empty queue" queue))
	    (else
	      (set-front-ptr! (cdr (front-ptr queue)))
	      dispatch)))
    (define (print-queue)
      (front-ptr queue))
    (define (dispatch m)
      (cond ((eq? m 'insert-queue!) insert-queue!)
	    ((eq? m 'delete-queue!) delete-queue!)
	    ((eq? m 'front) front)
	    ((eq? m 'empty-queue?) empty-queue?)
	    ((eq? m 'print-queue) print-queue)
	    (else
	      (error "Undefined method called on queue" m))))
    dispatch))

; interface to the user
(define (insert-queue! queue item)
  ((queue 'insert-queue!) item))
(define (delete-queue! queue)
  ((queue 'delete-queue!)))
(define (front queue)
  ((queue 'front)))
(define (empty-queue? queue)
  ((queue 'empty-queue?)))
(define (print-queue queue)
  ((queue 'print-queue)))

(define q1 (make-queue))
(print-queue q1)
(empty-queue? q1)
(insert-queue! q1 'a)
(print-queue q1)
(front q1)
(print-queue q1)
(insert-queue! q1 'b)
(print-queue q1)
(delete-queue! q1)
(print-queue q1)
(delete-queue! q1)
(print-queue q1)
